<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_pidgeon1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///music
audio_play_sound(sound_looop, 1, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable Creation

px = room_width / 2; //starting position x
py = room_height / 2; //starting position y
pz = 0; //starting position z, currently not implemented
vz = 0;

moveSpeed = 300; // pixels per second
defaultMoveSpeed = 300;
defaultJumpSpeed = 600;
charge = -0.5; //starting charge
decharge = 0.03; //amount of decrease per second, 1 is max charge 0 is no charge
evil = 0;
enemies_left = 10;

global.level = 0;
global.gameover = false;
has_won = false;
sprite_base = sprite_index;

anim_end = false;
jump_duration = 0.25 * room_speed; // How long a jump should go for
is_jumping = false;
can_jump = true;
can_be_hit = true;

car_hit_delay = 100;

draw_flash = false;
pigeon_glow = false;
glow = 0;
can_peck = true;
peck_delay = 60;

image_speed = 0.2;

depth = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pigeon_glow = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_flash = false;
draw_set_blend_mode(bm_normal);
draw_set_colour(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_peck = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_be_hit = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No more jumping
//image_angle = 0;
//is_jumping = false;
//moveSpeed = defaultMoveSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

// Movement Keys
var moveUp = keyboard_check(ord("W"));
var moveDown = keyboard_check(ord("S"));
var moveLeft = keyboard_check(ord("A"));
var moveRight = keyboard_check(ord("D"));

var oldpx = px;
var oldpy = py;

// Left-Right
var lr = 0;
if(moveLeft){
    image_xscale = 1;
    lr -= 1;
}
if(moveRight){
    image_xscale = -1;
    lr += 1;
}

// Up-Down
var ud = 0;
if(moveDown){ud += 1;}
if(moveUp){ud -= 1;}

// Check game over
if (global.gameover) {
    lr = 0;
    ud = 0;
}

// Moving
if(lr != 0 or ud != 0){
    var sp = delta_time / 1000000 * moveSpeed / sqrt(lr * lr + ud * ud);
    
    px += lr * sp;
    py += ud * sp;
}


// Collisions
if((place_meeting(oldpx, py, object_cant_walk) &amp;&amp; pz &lt; 30) || place_meeting(oldpx, py, object_cant_jump)){
    py = oldpy;
}

if((place_meeting(px, oldpy, object_cant_walk) &amp;&amp; pz &lt; 30) || place_meeting(px, oldpy, object_cant_jump)){
    px = oldpx;
}

vz -= 2000 * delta_time / 1000000;
pz += vz * delta_time / 1000000;
if(pz &lt; 0){
    pz = 0;
    vz = 0;
    
    
    //bad code 101
    var a = 0;
    var s = 1;
    while(place_meeting(px, py + a * s, object_cant_walk)){
        a += 1;
        s *= -1;
        if(place_meeting(px, py + a * s, object_cant_walk)){
            s *= -1;
        }else{
            break;
        }
    }
    py += a * s;
}

x = px;
y = py - pz;

if(global.level &lt; 3) {
    charge -= delta_time / 1000000 * decharge;
}

if(charge &gt; 4) {
    charge = 4;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update level and sprite
if(has_won) exit;

can_jump = true;

if(charge &lt; -1) {
    sprite_index = sprite_base + 3;
    if(global.level == 1) {
        glow = 100;
        pigeon_glow = true;
        alarm[4] = 30;
    }
    global.level = -1;
    global.gameover = true;
} else if (charge &lt; 0) {
    global.level = 0;
    sprite_index = sprite_base;
    if(global.level == 1) {
        glow = 100;
        pigeon_glow = true;
        alarm[4] = 30;
    }
} else if (charge &lt; 1) {
    sprite_index = sprite_base + 1;
    if(global.level == 0) {
        charge += 0.5;
        glow = 100;
        pigeon_glow = true;
        alarm[4] = 30;
    } else if(global.level == 2) {
        glow = 100;
        pigeon_glow = true;
        alarm[4] = 30;
    }
    global.level = 1;
} else if (charge &lt; 2) {
    if(anim_end) sprite_index = sprite_base + 2;
    if(global.level == 1) {
        charge += 0.5;
        glow = 100;
        pigeon_glow = true;
        alarm[4] = 30;
    }
    if(global.level == 3) {
        enemies_left = 10;
        draw_flash = true;
        alarm[3] = 15;
        background_visible[1] = false;
    }
    global.level = 2;
} else {
    sprite_index = sprite_base + 4;
    if(global.level == 2) {
        charge += 1;
        draw_flash = true;
        alarm[3] = 15;
        background_visible[1] = true;
    }
    global.level = 3;
    can_jump = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(enemies_left &lt;= 0) {
    draw_flash = true;
    has_won = true;
    alarm[3] = 15;
    instance_create(512, 148, obj_win);
    
    with(object_npc) {
        instance_destroy();
    }
    
    sprite_index = sprite_base;
}

/// Press R to restart

var restart_key = keyboard_check_pressed(ord("R"));

if (restart_key &amp;&amp; global.gameover) {
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update depth

depth = -py;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///colide car

hit = false;


if(place_meeting(px, py, object_npc_car) and pz &lt; 30){
    if (!hit &amp;&amp; can_be_hit) {
        charge -= 1.00;
        can_be_hit = false;
        alarm[1] = car_hit_delay;
    }
    hit = true;
}else{
    hit=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lose charge upon hit of bullet

if (!is_jumping) {
    charge -= 0.12;
    with(other){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_npc_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pecking

if (can_peck) {
    var foodnum = irandom(1) + 1;

    if(global.level &gt;= 1){
        with (other) {
            will_shoot = false;
            if(vx &lt; 1 &amp;&amp; vx &gt; -1) vx = 40;
            if(vy &lt; 1 &amp;&amp; vy &gt; -1) vy = 40;
            
            vx = -vx * 2;
            vy = -vy * 2;
            alarm[2] = -1;
            alarm[1] = -1;
        }
        if(global.level &gt; 1){
            with(other){
                fly = true;
                spin = true;
                vx = vx * 2;
                vy = vy * 2;
            }
            anim_end = false;
            image_index = 0;
            sprite_index = sprite_base + 5;
            if(global.level == 3) enemies_left -= 1;
        }
        can_peck = false;
        alarm[2] = peck_delay;
        
        var pow = instance_create(x,y - sprite_height * 0.6,object_pow);
        pow.size = 1;
    }
    
    with(other) {
        var dist = 50;
        for(var i = 0;i &lt; foodnum;i++){
            instance_create(x + random(dist * 2) - dist, y + random(dist * 2) - dist, object_food);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_npc_person">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pecking

if (can_peck) {
    var foodnum = irandom(1) + 1;

    if(global.level &gt;= 1){
        foodnum += irandom(2) + 1;
        with (other) {
            if(vx &lt; 1 &amp;&amp; vx &gt; -1) vx = 10;
            if(vy &lt; 1 &amp;&amp; vy &gt; -1) vy = 10;
            vx = vx * 2;
            vy = vy * 2;
        }
        if(global.level &gt; 1){
            foodnum += 2;
            with(other){
                fly = true;
                spin = true;
                vx = vx * 2;
                vy = vy * 2;
            }
            anim_end = false;
            image_index = 0;
            sprite_index = sprite_base + 5;
        }
        var pow = instance_create(x,y - sprite_height * 0.6,object_pow);
        pow.size = global.level / 2;
    }
    
    with(other) {
        var dist = 50;
        for(var i = 0;i &lt; foodnum;i++){
            instance_create(x + random(dist * 2) - dist, y + random(dist * 2) - dist, object_food);
        }
    }
    
    can_peck = false;
    alarm[2] = peck_delay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_food">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(charge &lt; 4) {
    charge += 0.10 * power(0.5, global.level);
}

with(other){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anim_end = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pigeon_glow) {
    if(glow &gt; 250) glow = 250;
    d3d_set_fog(true,make_color_rgb(glow, glow, glow),0,0);
    draw_self();
    d3d_set_fog(false,c_black,0,0);
    glow += 20;
} else {
    draw_self();
}

draw_sprite_ext(sprite_index, image_index, px, py + sprite_height, image_xscale, -1, 0, make_colour_rgb(0,0,0), 0.5);
var ux = 0;
var uy = window_get_height() - 20;
var width = window_get_width();
var height = 20;

if(draw_flash) {
    draw_set_colour(make_colour_rgb(255, 255, 255));
    draw_set_blend_mode(bm_add);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);
}

if(!has_won) {
    draw_set_colour(make_colour_rgb(150, 0, 0));
    draw_rectangle(ux, uy, ux + (width * (charge + 1) / 4), uy + height, false);
    draw_set_colour(make_colour_rgb(0, 0, 0));
    draw_rectangle(ux, uy, ux + width, uy + height, true);
    
    for(var i = 0;i &lt;= 3;i++){
        draw_line(ux + (width * (i + 1) / 4), uy, ux + (width * (i + 1) / 4), uy + height);
    }
}

if (charge &lt;= -1) {
    draw_sprite(sprite_gameover, -1, room_width / 2, room_height / 2);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump mechanics

if (pz == 0 &amp;&amp; charge &gt; -1 &amp;&amp; can_jump) {
    //alarm[0] = jump_duration;
    vz = 600;
    //is_jumping = true;
    //moveSpeed = defaultJumpSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
